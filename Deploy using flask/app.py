from flask import Flask, render_template, requestfrom pyspark.sql import SparkSessionfrom pyspark.ml.recommendation import ALSModelfrom pyspark.ml.feature import IndexToStringimport pyspark.sql.functions as Fspark = SparkSession.builder.appName('books').getOrCreate()app = Flask(__name__)# Load your ALS modelmodel_loaded = ALSModel.load('book_recommendations')IndexString_model_loaded = IndexToString.load('index_to_books')@app.route("/")@app.route("/index")def index():    return render_template("index.html")@app.route("/recommend", methods=["POST"])def recommend():    user_ids = request.form.get("user_ids").split(",")  # Assuming user IDs are comma-separated    num_rec = int(request.form.get("num_recommendations")) # number of recommendations        recommendations = Book_Recommend(user_ids, num_rec)        return render_template("recommendations.html", recommendations=recommendations)def Book_Recommend(user_ids, num_rec):    test_user_df = spark.createDataFrame([(user_id,) for user_id in user_ids], ["User_ID"])    loaded_rec = model_loaded.recommendForUserSubset(test_user_df, num_rec)    exploded_loaded_rec = loaded_rec.select('User_ID', F.explode('recommendations').alias("exploded_recommendations"))    loaded_rec_names = IndexString_model_loaded.transform(exploded_loaded_rec.select('User_ID', 'exploded_recommendations.book_index'))\            .select('User_ID', 'Book_Title')        # Get the book information    bookpath = 'Books.csv'    book_info = spark.read.csv(bookpath, header=True, inferSchema=True)        # We modify the column names.    for name in book_info.schema.names:        book_info = book_info.withColumnRenamed(name, name.replace('-', '_'))            book_info.createOrReplaceTempView('book_info')    loaded_rec_names.createOrReplaceTempView('loaded_rec_names')    query = " SELECT R.User_ID, B.ISBN, B.Book_Title, B.Book_Author, B.Year_Of_Publication, B.Publisher\          FROM book_info B\          INNER JOIN loaded_rec_names R\          ON R.Book_Title = B.Book_Title"    recommendations = spark.sql(query).orderBy('User_ID').orderBy('User_ID', 'Book_Title').toPandas()    return recommendationsif __name__ == "__main__":    app.run(debug=True)    